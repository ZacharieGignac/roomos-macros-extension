{
  "name": "roomos-macros-extension",
  "displayName": "RoomOS Macro Editor",
  "description": "Edit Cisco codec macros directly from VS Code",
  "version": "0.5.0",
  "publisher": "ZacharieGignac",
  "license": "MIT",
  "icon": "images/icon.png",
  "engines": {
    "vscode": "^1.75.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onFileSystem:codecfs"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "views": {
      "explorer": [
        {
          "id": "codecMacrosExplorer",
          "name": "RoomOS Macros"
        }
      ]
    },
    "configuration": {
      "properties": {
        "codec.autoRestartOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Automatically restart macro framework when saving a macro"
        },
        "codec.autoRestartOnActivateDeactivate": {
          "type": "boolean",
          "default": true,
          "description": "Automatically restart macro framework when activating or deactivating a macro"
        },
        "codec.forcedProduct": {
          "type": "string",
          "default": "auto",
          "description": "Force a specific product for xAPI schema filtering (use 'auto' to detect)"
        },
        "codec.confirmMacroDelete": {
          "type": "boolean",
          "default": true,
          "description": "Ask for confirmation before deleting a macro"
        },
        "codec.confirmFrameworkRestart": {
          "type": "boolean",
          "default": true,
          "description": "Ask for confirmation before restarting the Macro Framework"
        },
        "codec.applySchemaToIntellisense": {
          "type": "boolean",
          "default": true,
          "description": "Apply xAPI schema to IntelliSense (completions and hovers)"
        },
        "codec.showSchemaHover": {
          "type": "boolean",
          "default": false,
          "description": "Show schema help on hover while typing"
        }
      }
    },
    "commands": [
      {
        "command": "ciscoCodec.openMacro",
        "title": "Open Macro"
      },
      {
        "command": "ciscoCodec.deleteMacro",
        "title": "Remove Macro"
      },
      {
        "command": "ciscoCodec.renameMacro",
        "title": "Rename Macro"
      },
      {
        "command": "ciscoCodec.activateMacro",
        "title": "Activate Macro"
      },
      {
        "command": "ciscoCodec.deactivateMacro",
        "title": "Deactivate Macro"
      },
      {
        "command": "ciscoCodec.restartMacroFramework",
        "title": "Restart Macro Framework"
      },
      {
        "command": "ciscoCodec.addProfile",
        "title": "Codec: Add Codec Profile"
      },
      {
        "command": "ciscoCodec.switchProfile",
        "title": "Codec: Switch Codec Profile"
      },
      {
        "command": "ciscoCodec.createMacro",
        "title": "Create Macro"
      },
      {
        "command": "ciscoCodec.manageProfiles",
        "title": "Settings"
      },
      {
        "command": "ciscoCodec.resetExtensionData",
        "title": "Codec: Reset Extension Data"
      },
      {
        "command": "ciscoCodec.showXapiHelp",
        "title": "xAPI: Show Help for Symbol"
      },
      {
        "command": "ciscoCodec.insertXapiStub",
        "title": "xAPI: Insert Stub"
      }
    ],
    "menus": {
      "view/item/context": [
        {
          "command": "ciscoCodec.createMacro",
          "when": "view == codecMacrosExplorer",
          "group": "1_create"
        },
        {
          "command": "ciscoCodec.restartMacroFramework",
          "when": "view == codecMacrosExplorer",
          "group": "0_restart@0"
        },
        {
          "command": "ciscoCodec.renameMacro",
          "when": "view == codecMacrosExplorer && viewItem =~ /macro:.*/",
          "group": "2_modification"
        },
        {
          "command": "ciscoCodec.deleteMacro",
          "when": "view == codecMacrosExplorer && viewItem =~ /macro:.*/",
          "group": "2_modification"
        },
        {
          "command": "ciscoCodec.activateMacro",
          "when": "view == codecMacrosExplorer && viewItem == macro:inactive",
          "group": "3_state"
        },
        {
          "command": "ciscoCodec.deactivateMacro",
          "when": "view == codecMacrosExplorer && viewItem == macro:active",
          "group": "3_state"
        }
      ],
      "view/title": [
        {
          "command": "ciscoCodec.manageProfiles",
          "when": "view == codecMacrosExplorer",
          "group": "navigation@0"
        }
      ],
      "editor/context": [
        {
          "command": "ciscoCodec.showXapiHelp",
          "when": "resourceScheme == codecfs && editorLangId =~ /(javascript|typescript|javascriptreact|typescriptreact)/",
          "group": "navigation@9"
        },
        {
          "command": "ciscoCodec.insertXapiStub",
          "when": "resourceScheme == codecfs && editorLangId =~ /(javascript|typescript|javascriptreact|typescriptreact)/",
          "group": "navigation@8"
        },
        {
          "command": "ciscoCodec.activateMacro",
          "when": "resourceScheme == codecfs && editorLangId =~ /(javascript|typescript|javascriptreact|typescriptreact)/",
          "group": "navigation@7"
        },
        {
          "command": "ciscoCodec.deactivateMacro",
          "when": "resourceScheme == codecfs && editorLangId =~ /(javascript|typescript|javascriptreact|typescriptreact)/",
          "group": "navigation@7"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run build",
    "compile": "tsc -p ./ --noEmit",
    "build": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run build",
    "test": "node ./out/test/runTest.js",
    "makedist": "node -e \"require('fs').mkdirSync('dist',{recursive:true})\"",
    "pak": "npm run compile && npm run build && npm run makedist && vsce package --out dist/RoomOS-Macro-Editor-%npm_package_version%.vsix",
    "devpak": "npm run compile && npm run build && npm run makedist && node -e \"const {spawnSync}=require('child_process');const d=new Date();const pad=n=>String(n).padStart(2,'0');const out='dist/RoomOS-Macro-Editor-'+d.getFullYear()+'-'+pad(d.getMonth()+1)+'-'+pad(d.getDate())+'.vsix';const r=spawnSync('vsce',['package','--out',out],{stdio:'inherit',shell:true});if(r.status)process.exit(r.status);\""
  },
  "devDependencies": {
    "@types/node": "^18.0.0",
    "@types/vscode": "^1.70.0",
    "typescript": "^5.0.0",
    "vsce": "^2.14.0"
  },
  "dependencies": {
    "jsxapi": "^6.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ZacharieGignac/roomos-macros-extension.git"
  },
  "files": [
    "out/**",
    "images/icon.png",
    "README.md",
    "LICENSE"
  ]
}
